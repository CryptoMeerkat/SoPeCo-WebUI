package org.sopeco.frontend.client.helper;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;

import javax.servlet.ServletContext;

/**
 * 
 * @author Marius Oehler
 * 
 */
public final class MavenInfos {

	private static final String POM_PATH = "META-INF/maven/";
	private static final String POM_NAME = "pom.properties";

	private MavenInfos() {
	}

	private static String version;
	private static String buildDate;
	private static boolean loaded = false;
	private static boolean pomFound = false;

	/**
	 * Reads the build version and date from the pom.proterties, which is
	 * generated by the maven build process.
	 * 
	 * @param context
	 *            context of the servlet, which is required to find the correct
	 *            path.
	 */
	private static void load(ServletContext context) {
		if (loaded) {
			return;
		}

		File pomFile = search(new File(context.getRealPath(POM_PATH)));

		if (pomFile != null) {
			pomFound = true;

			try {
				BufferedReader reader = new BufferedReader(new FileReader(pomFile));

				reader.readLine();
				buildDate = reader.readLine().substring(1);

				String line;
				while ((line = reader.readLine()) != null) {
					String[] split = line.split("=");
					if (split[0].equals("version")) {
						version = split[1];
						break;
					}
				}

				reader.close();
			} catch (FileNotFoundException e) {
				System.out.println("No maven build information found.");
			} catch (IOException e) {
				e.printStackTrace();
			}

		}
		loaded = true;
	}

	/**
	 * Searchs the pom.proteries file in the given directory.
	 * 
	 * @param dir
	 * @return
	 */
	private static File search(File dir) {
		if (!dir.exists()) {
			return null;
		}
		File[] files = dir.listFiles();
		for (int i = 0; i < files.length; i++) {
			File f = files[i];
			if (!f.isDirectory() && f.getName().equals(POM_NAME)) {
				return f;
			}
			if (f.isDirectory()) {
				File temp = search(f);
				if (temp != null) {
					return temp;
				}
			}
		}
		return null;
	}

	/**
	 * Returns a string which contains the build version and build date. If no
	 * build information are available, the return value is an empty string.
	 * 
	 * @param context
	 * @return 
	 */
	public static String getInfoString(ServletContext context) {
		load(context);
		if (pomFound) {
			return version + " - " + buildDate;
		} else {
			return "";
		}
	}
}
